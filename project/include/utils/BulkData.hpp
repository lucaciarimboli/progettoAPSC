#ifndef BULKDATA_H
#define BULKDATA_H

#include <array>
#include <vector>
#include <algorithm>

#include "utils/MeanData.hpp"

class BulkData {
    public:

    // Constructor
    BulkData() : w({0.0, 0.0, 0.0}), w_err({0.0, 0.0, 0.0}),
                 DN({0.0, 0.0, 0.0}), DN_err({0.0, 0.0, 0.0}) {};
    

    // Public methods:
    void update_bulk(const std::vector<double> & tt, const unsigned int & count_sst, const std::vector<MeanData> & mea, const double & N);
    bool is_empty() const;

    // Getters:
    const std::array<double, 3> & get_w() const { return w; };
    const std::array<double, 3> & get_w_err() const { return w_err; };  
    const std::array<double, 3> & get_DN() const { return DN; };
    const std::array<double, 3> & get_DN_err() const { return DN_err; };

    // Setters:
    void set_mean(const std::vector<MeanData> & y){mean = y;};

    private:

    // Class Members
    std::array<double, 3> w;      // Drift velocity
    std::array<double, 3> w_err;  // Error in drift velocity
    std::array<double, 3> DN;     // Diffusion constant
    std::array<double, 3> DN_err; // Error in diffusion constant
                 
    std::vector<double> t;        // time starting from T_sst
    double t_max;                 // maximum time after steady state
    std::vector<MeanData> mean;   // mean data of steady states

    // Private Methods:
    void normalize(std::vector<double> & y, const double & y_max);
    void update_time_vector(const std::vector<double> & tt, const unsigned int & count_sst);
    void update_mean_data(const unsigned int & count_sst, const std::vector<MeanData> & mea);
    void compute_drift_velocity();
    void compute_diffusion_coeff(const double& N);
    const std::array<double,2> linear_regression(const std::vector<double>& y) const;

    //----------------------------------------------------------------------------------------------------------//
    //-------------------------------------- FOR DEBUGGING PURPOSES --------------------------------------------//
    // t-student 0.05 quantiles:
    /*const std::array<double,142> t_student_quantiles = {
        1.833113, 1.812461, 1.795885, 1.782288, 1.770933, 1.76131, 1.75305,
        1.745884, 1.739607, 1.734064, 1.729133, 1.724718, 1.720743, 1.717144, 1.713872,
        1.710882, 1.708141, 1.705618, 1.703288, 1.701131, 1.699127, 1.697261, 1.695519, 1.693889,
        1.69236, 1.690924, 1.689572, 1.688298, 1.687094, 1.685954, 1.684875, 1.683851, 1.682878, 1.681952,
        1.681071, 1.68023, 1.679427, 1.67866, 1.677927, 1.677224, 1.676551, 1.675905, 1.675285, 1.674689, 1.674116,
        1.673565, 1.673034, 1.672522, 1.672029, 1.671553, 1.671093, 1.670649, 1.670219, 1.669804, 1.669402, 1.669013,
        1.668636, 1.668271, 1.667916, 1.667572, 1.667239, 1.666914, 1.6666, 1.666294, 1.665996, 1.665707, 1.665425,
        1.665151, 1.664885, 1.664625, 1.664371, 1.664125, 1.663884, 1.663649, 1.66342, 1.663197, 1.662978, 1.662765,
        1.662557, 1.662354, 1.662155, 1.661961, 1.661771, 1.661585, 1.661404, 1.661226, 1.661052, 1.660881, 1.660715,
        1.660551, 1.660391, 1.660234, 1.660081, 1.65993, 1.659782, 1.659637, 1.659495, 1.659356, 1.659219, 1.659085,
        1.658953, 1.658824, 1.658697, 1.658573, 1.65845, 1.65833, 1.658212, 1.658096, 1.657982, 1.65787, 1.657759,
        1.657651, 1.657544, 1.657439, 1.657336, 1.657235, 1.657135, 1.657037, 1.65694, 1.656845, 1.656752, 1.656659,
        1.656569, 1.656479, 1.656391, 1.656305, 1.656219, 1.656135, 1.656052, 1.65597, 1.65589, 1.655811, 1.655732,
        1.655655, 1.655579, 1.655504, 1.65543, 1.655357, 1.655285, 1.655215, 1.655145, 1.655076
    };
    */

    // t-student 0.025 quantiles:
    const std::array<double,142> t_student_quantiles = {
        2.262157, 2.228139, 2.200985, 2.178813, 2.160369, 2.144787, 2.13145, 2.119905, 2.109816,
        2.100922, 2.093024, 2.085963, 2.079614, 2.073873, 2.068658, 2.063899, 2.059539, 2.055529, 2.051831,
        2.048407, 2.04523, 2.042272, 2.039513, 2.036933, 2.034515, 2.032245, 2.030108, 2.028094, 2.026192,
        2.024394, 2.022691, 2.021075, 2.019541, 2.018082, 2.016692, 2.015368, 2.014103, 2.012896, 2.011741,
        2.010635, 2.009575, 2.008559, 2.007584, 2.006647, 2.005746, 2.004879, 2.004045, 2.003241, 2.002465,
        2.001717, 2.000995, 2.000298, 1.999624, 1.998972, 1.998341, 1.99773, 1.997138, 1.996564, 1.996008,
        1.995469, 1.994945, 1.994437, 1.993943, 1.993464, 1.992997, 1.992543, 1.992102, 1.991673, 1.991254,
        1.990847, 1.99045, 1.990063, 1.989686, 1.989319, 1.98896, 1.98861, 1.988268, 1.987934, 1.987608, 1.98729,
        1.986979, 1.986675, 1.986377, 1.986086, 1.985802, 1.985523, 1.985251, 1.984984, 1.984723, 1.984467,
        1.984217, 1.983972, 1.983731, 1.983495, 1.983264, 1.983038, 1.982815, 1.982597, 1.982383, 1.982173,
        1.981967, 1.981765, 1.981567, 1.981372, 1.98118, 1.980992, 1.980808, 1.980626, 1.980448, 1.980272, 1.9801,
        1.97993, 1.979764, 1.9796, 1.979439, 1.97928, 1.979124, 1.978971, 1.97882, 1.978671, 1.978524, 1.97838,
        1.978239, 1.978099, 1.977961, 1.977826, 1.977692, 1.977561, 1.977431, 1.977304, 1.977178, 1.977054,
        1.976931, 1.976811, 1.976692, 1.976575, 1.97646, 1.976346, 1.976233, 1.976122, 1.976013, 1.975905
    };
    //----------------------------------------------------------------------------------------------------------//
    //----------------------------------------------------------------------------------------------------------//
};

#endif